{"version":3,"sources":["contexts/store.tsx","components/FormGroup.tsx","components/Modal.tsx","components/AddProjectPartModal.tsx","components/MenuButton.tsx","components/ProjectDetailsListItem.tsx","services/project.service.ts","contexts/projects.provider.tsx","hooks/usePartCounter.tsx","pages/ProjectDetails.tsx","components/AddButton.tsx","components/AddProjectModal.tsx","components/ProjectsList.tsx","pages/Projects.tsx","pages/App.tsx","index.tsx"],"names":["StoreContext","createContext","undefined","StoreProvider","children","useState","title","header","setHeader","resetHeader","useCallback","Provider","value","useStore","context","useContext","Error","FormGroup","label","placeholder","defaultValue","type","name","autofocus","register","required","isInvalid","errors","className","htmlFor","autoFocus","id","AddModal","close","save","onClick","AddProjectPartModal","useForm","handleSubmit","formState","Modal","x","MenuButton","menuItems","isOpen","setIsOpen","map","item","index","callback","icon","ProjectDetailsListItem","part","deleteState","increasePart","decreasePart","setProjectCount","selectPart","e","stopPropagation","count","toString","onChange","target","ProjectService","projects","Promise","resolve","JSON","parse","localStorage","getItem","match","find","p","parts","reject","projectData","this","getProjects","then","setItem","stringify","faker","uuid","finished","projectId","projectPartData","update","partIds","filter","includes","project","ProjectServiceContext","ProjectServiceProvider","projectService","useMemo","useProjectService","usePartCounter","setProject","useDebounce","debouncedProject","getProjectById","React","a","response","addProjectPart","projectPartForm","createProjectPart","deleteProjectParts","partId","syncProject","useEffect","ProjectDetails","addProjectPartModal","setAddProjectPartModal","setDeleteState","selectedParts","setSelectedParts","useParams","sp","back","path","data","length","disabled","AddButton","AddProjectModal","ProjectsList","to","Projects","showAddModal","setShowAddModal","setProjects","filterOn","setFilterOn","filteredProjects","saveProject","createProject","App","action","exact","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5a8a71e9.chunk.js","sourcesContent":["import { createContext, useCallback, useContext, useState } from 'react';\r\n\r\nexport interface Header {\r\n    title: string;\r\n    back?: { icon?: string; path: string };\r\n    action?: { icon: string; callback: VoidFunction };\r\n}\r\nexport interface StoreContextInterface {\r\n    header: Header;\r\n    setHeader: (value: Header) => void;\r\n    resetHeader: VoidFunction;\r\n}\r\n\r\nexport const StoreContext = createContext<StoreContextInterface | undefined>(undefined);\r\n\r\nexport const StoreProvider: React.FC = ({ children }) => {\r\n    const [header, setHeader] = useState<Header>({ title: 'Knitter' });\r\n\r\n    const resetHeader = useCallback(() => {\r\n        setHeader({ title: 'Knitter' });\r\n    }, [setHeader]);\r\n\r\n    return <StoreContext.Provider value={{ header, setHeader, resetHeader }}>{children}</StoreContext.Provider>;\r\n};\r\n\r\nexport function useStore() {\r\n    const context = useContext(StoreContext);\r\n    if (!context) {\r\n        throw new Error('StoreContext is undefinded');\r\n    }\r\n    return context;\r\n}\r\n","import React from 'react';\r\nimport { UseFormRegister, FieldValues, ValidationRule, DeepMap, FieldError } from 'react-hook-form';\r\n\r\ninterface Props {\r\n    label: string;\r\n    name: string;\r\n    type?: 'text' | 'number';\r\n    autofocus?: boolean;\r\n    register: UseFormRegister<any>;\r\n    required?: string | ValidationRule<boolean>;\r\n    errors: DeepMap<FieldValues, FieldError>;\r\n    placeholder?: string;\r\n    defaultValue?: string | number;\r\n}\r\n\r\nconst FormGroup: React.FC<Props> = ({\r\n    label,\r\n    placeholder,\r\n    defaultValue,\r\n    type = 'text',\r\n    name,\r\n    autofocus = false,\r\n    register,\r\n    required,\r\n    errors,\r\n}) => {\r\n    const isInvalid = errors[name];\r\n    return (\r\n        <div className={isInvalid ? 'input-group -invalid' : 'input-group'}>\r\n            <label htmlFor={name}>{label}</label>\r\n            <input\r\n                {...register(name, { required })}\r\n                type={type}\r\n                autoFocus={autofocus}\r\n                name={name}\r\n                defaultValue={defaultValue}\r\n                id={name}\r\n                className=\"input\"\r\n                placeholder={placeholder}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FormGroup;\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    title: string;\r\n    close: VoidFunction;\r\n    save: VoidFunction;\r\n}\r\n\r\nconst AddModal: React.FC<Props> = ({ children, title, close, save }) => {\r\n    return (\r\n        <div className=\"modal\">\r\n            <div className=\"modal__background\"></div>\r\n            <div className=\"modal__body\">\r\n                <header>\r\n                    <h2>{title}</h2>\r\n                    <button onClick={close} type=\"button\" className=\"btn btn-icon\">\r\n                        <span className=\"material-icons-round\">close</span>\r\n                    </button>\r\n                </header>\r\n                <section>{children}</section>\r\n                <footer>\r\n                    <button onClick={close} type=\"button\" className=\"btn btn-secondary\">\r\n                        Cancel\r\n                    </button>\r\n                    <button onClick={save} type=\"button\" className=\"btn btn-primary\">\r\n                        Save\r\n                    </button>\r\n                </footer>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddModal;\r\n","import React from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { ProjectPartForm } from '../interfaces/project.interface';\r\nimport FormGroup from './FormGroup';\r\nimport Modal from './Modal';\r\n\r\ninterface Props {\r\n    close: VoidFunction;\r\n    save: (value: any) => void;\r\n}\r\n\r\nconst AddProjectPartModal: React.FC<Props> = ({ close, save }) => {\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors },\r\n    } = useForm<ProjectPartForm>();\r\n    return (\r\n        <Modal title=\"Add part\" close={close} save={handleSubmit((x) => save(x))}>\r\n            <div className=\"add-part\">\r\n                <FormGroup\r\n                    label=\"Name\"\r\n                    name=\"name\"\r\n                    placeholder=\"Ex. Right sleeve\"\r\n                    autofocus={true}\r\n                    required={true}\r\n                    register={register}\r\n                    errors={errors}\r\n                />\r\n                <FormGroup\r\n                    type=\"number\"\r\n                    placeholder=\"Ex. 0\"\r\n                    defaultValue={0}\r\n                    label=\"Count\"\r\n                    name=\"count\"\r\n                    required={true}\r\n                    register={register}\r\n                    errors={errors}\r\n                />\r\n            </div>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default AddProjectPartModal;\r\n","import React, { useState } from 'react';\r\n\r\ninterface Props {\r\n    menuItems: Array<{\r\n        icon: string;\r\n        callback: VoidFunction;\r\n    }>;\r\n}\r\n\r\nfunction MenuButton({ menuItems }: Props) {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    return (\r\n        <div className={isOpen ? 'menu-button -open' : 'menu-button'}>\r\n            <button onClick={() => setIsOpen(!isOpen)} className=\"menu-button__main\">\r\n                <span className=\"material-icons-round\">{isOpen ? 'close' : 'menu'}</span>\r\n            </button>\r\n            <div className=\"menu-button__menu\">\r\n                {menuItems.map((item, index) => {\r\n                    return (\r\n                        <button\r\n                            key={index}\r\n                            onClick={() => {\r\n                                item.callback();\r\n                                setIsOpen(false);\r\n                            }}\r\n                            className=\"btn menu-button__action\"\r\n                        >\r\n                            <span className=\"material-icons-round\">{item.icon}</span>\r\n                        </button>\r\n                    );\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MenuButton;\r\n","import { useState } from 'react';\r\nimport { ProjectPart } from '../interfaces/project.interface';\r\n\r\ninterface Props {\r\n    part: ProjectPart;\r\n    deleteState: Boolean;\r\n    increasePart: (partId: string) => void;\r\n    decreasePart: (partId: string) => void;\r\n    setProjectCount: (partId: string, count: number) => void;\r\n    selectPart: (partId: string) => void;\r\n}\r\n\r\nfunction ProjectDetailsListItem({ part, deleteState, increasePart, decreasePart, setProjectCount, selectPart }: Props) {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    return (\r\n        <li className={isOpen ? 'project-details-list-item -open' : 'project-details-list-item'}>\r\n            <div onClick={() => setIsOpen(!isOpen)} className=\"project-details-list-item__main\">\r\n                {deleteState && (\r\n                    <input\r\n                        className=\"project-details-list-item__select\"\r\n                        onClick={(e) => {\r\n                            e.stopPropagation();\r\n                            selectPart(part.id);\r\n                        }}\r\n                        type=\"checkbox\"\r\n                    />\r\n                )}\r\n                <div className=\"project-details-list-item__info\">\r\n                    <p className=\"title\">{part.name}</p>\r\n                    <p className=\"count\">Count: {part.count}</p>\r\n                </div>\r\n                <button className=\"btn arrow\" onClick={() => setIsOpen(!isOpen)}>\r\n                    <span className=\"material-icons-round\">expand_more</span>\r\n                </button>\r\n            </div>\r\n            <div className=\"project-details-list-item__extra\">\r\n                <button onClick={() => decreasePart(part.id)} className=\"project-details-list-item__min\">\r\n                    <span className=\"material-icons-round\">remove</span>\r\n                </button>\r\n                <input\r\n                    value={(+part.count).toString()}\r\n                    onChange={(e) => setProjectCount(part.id, +e?.target?.value)}\r\n                    className=\"project-details-list-item__counter\"\r\n                    type=\"number\"\r\n                />\r\n                <button onClick={() => increasePart(part.id)} className=\"project-details-list-item__plus\">\r\n                    <span className=\"material-icons-round\">add</span>\r\n                </button>\r\n            </div>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default ProjectDetailsListItem;\r\n","import { Project, ProjectForm, ProjectPart, ProjectPartForm, Projects } from '../interfaces/project.interface';\r\nimport * as faker from 'faker';\r\n\r\nexport class ProjectService {\r\n    // projects: Projects = [...Array(15)].map(() => {\r\n    //     return {\r\n    //         title: faker.random.word(),\r\n    //         id: faker.datatype.uuid(),\r\n    //         finished: faker.datatype.boolean(),\r\n    //         parts: [...Array(3)].map(() => {\r\n    //             return {\r\n    //                 name: faker.random.word(),\r\n    //                 count: faker.datatype.number(200),\r\n    //                 id: faker.datatype.uuid(),\r\n    //             };\r\n    //         }),\r\n    //     };\r\n    // });\r\n\r\n    projects: Projects = [];\r\n\r\n    getProjects() {\r\n        return Promise.resolve(JSON.parse(localStorage.getItem('projects') || '[]'));\r\n    }\r\n\r\n    getProjectById(id: string) {\r\n        const projects: Projects = JSON.parse(localStorage.getItem('projects') || '[]');\r\n        const match = projects.find((p) => p.id === id);\r\n        if (!match) return Promise.reject();\r\n        return Promise.resolve({ ...match, parts: match?.parts.map((p) => ({ ...p, count: +p.count })) });\r\n    }\r\n\r\n    createProject(projectData: ProjectForm) {\r\n        return this.getProjects().then((projects) => {\r\n            return localStorage.setItem(\r\n                'projects',\r\n                JSON.stringify([...projects, { ...projectData, id: faker.datatype.uuid(), parts: [], finished: false }]),\r\n            );\r\n        });\r\n    }\r\n\r\n    createProjectPart(projectId: string, projectPartData: ProjectPartForm) {\r\n        return this.getProjects().then((projects) => {\r\n            const part: ProjectPart = { ...projectPartData, id: faker.datatype.uuid() } as ProjectPart;\r\n            const update = projects.map((p: Project) => (p.id === projectId ? { ...p, parts: [...p.parts, part] } : p));\r\n            return localStorage.setItem('projects', JSON.stringify(update));\r\n        });\r\n    }\r\n\r\n    deleteProjectParts(projectId: string, partIds: Array<string>) {\r\n        return this.getProjects().then((projects) => {\r\n            const update = projects.map((p: Project) =>\r\n                p.id === projectId ? { ...p, parts: p.parts.filter((part) => !partIds.includes(part.id)) } : p,\r\n            );\r\n            return localStorage.setItem('projects', JSON.stringify(update));\r\n        });\r\n    }\r\n\r\n    syncProject(project: Project) {\r\n        return this.getProjects().then((projects) => {\r\n            const update = projects.map((p: Project) => (p.id === project.id ? project : p));\r\n            return localStorage.setItem('projects', JSON.stringify(update));\r\n        });\r\n    }\r\n}\r\n","import { createContext, useContext, useMemo } from 'react';\r\nimport { ProjectService } from '../services/project.service';\r\n\r\nexport const ProjectServiceContext = createContext<ProjectService | undefined>(undefined);\r\n\r\nexport const ProjectServiceProvider: React.FC = ({ children }) => {\r\n    const projectService = useMemo(() => new ProjectService(), []);\r\n\r\n    return <ProjectServiceContext.Provider value={projectService}>{children}</ProjectServiceContext.Provider>;\r\n};\r\n\r\nexport function useProjectService() {\r\n    const context = useContext(ProjectServiceContext);\r\n    if (!context) {\r\n        throw new Error('projectServiceContext is undefined');\r\n    }\r\n    return context;\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDebounce } from 'use-debounce/lib';\r\nimport { useProjectService } from '../contexts/projects.provider';\r\nimport { Project, ProjectPartForm } from '../interfaces/project.interface';\r\n\r\nfunction usePartCounter() {\r\n    const [project, setProject] = useState<Project>();\r\n    const [debouncedProject] = useDebounce(project, 300);\r\n    const projectService = useProjectService();\r\n\r\n    const getProjectById = React.useCallback(\r\n        async (id) => {\r\n            return await projectService.getProjectById(id).then((response) => {\r\n                setProject(response);\r\n                return response;\r\n            });\r\n        },\r\n        [projectService],\r\n    );\r\n\r\n    const addProjectPart = React.useCallback(\r\n        async (projectId: string, projectPartForm: ProjectPartForm) => {\r\n            await projectService.createProjectPart(projectId, projectPartForm).then(() => getProjectById(projectId));\r\n        },\r\n        [projectService, getProjectById],\r\n    );\r\n\r\n    const deleteProjectParts = React.useCallback(\r\n        async (projectId: string, partIds: Array<string>) => {\r\n            await projectService.deleteProjectParts(projectId, partIds).then(() => getProjectById(projectId));\r\n        },\r\n        [projectService, getProjectById],\r\n    );\r\n\r\n    const increasePart = React.useCallback(\r\n        (partId: string) => {\r\n            if (project) {\r\n                setProject({\r\n                    ...project,\r\n                    parts: project.parts.map((part) => (part.id === partId ? { ...part, count: part.count + 1 } : part)),\r\n                });\r\n            }\r\n        },\r\n        [project, setProject],\r\n    );\r\n\r\n    const decreasePart = React.useCallback(\r\n        (partId: string) => {\r\n            if (project) {\r\n                setProject({\r\n                    ...project,\r\n                    parts: project.parts.map((part) => (part.id === partId ? { ...part, count: part.count - 1 } : part)),\r\n                });\r\n            }\r\n        },\r\n        [project, setProject],\r\n    );\r\n\r\n    const setProjectCount = React.useCallback(\r\n        (partId: string, count: number) => {\r\n            if (project) {\r\n                setProject({\r\n                    ...project,\r\n                    parts: project.parts.map((part) => (part.id === partId ? { ...part, count: count } : part)),\r\n                });\r\n            }\r\n        },\r\n        [project, setProject],\r\n    );\r\n\r\n    const syncProject = React.useCallback(\r\n        async (project: Project) => {\r\n            await projectService.syncProject(project);\r\n        },\r\n        [projectService],\r\n    );\r\n\r\n    useEffect(() => {\r\n        if (debouncedProject) {\r\n            syncProject(debouncedProject);\r\n        }\r\n    }, [syncProject, debouncedProject]);\r\n\r\n    return { project, setProject, increasePart, decreasePart, setProjectCount, getProjectById, addProjectPart, deleteProjectParts };\r\n}\r\n\r\nexport default usePartCounter;\r\n","import * as React from 'react';\r\nimport { useParams } from 'react-router';\r\nimport AddProjectPartModal from '../components/AddProjectPartModal';\r\nimport MenuButton from '../components/MenuButton';\r\nimport ProjectDetailsListItem from '../components/ProjectDetailsListItem';\r\nimport { useStore } from '../contexts/store';\r\nimport usePartCounter from '../hooks/usePartCounter';\r\n\r\nconst ProjectDetails = () => {\r\n    const [addProjectPartModal, setAddProjectPartModal] = React.useState(false);\r\n    const [deleteState, setDeleteState] = React.useState(false);\r\n    const [selectedParts, setSelectedParts] = React.useState<Array<string>>([]);\r\n\r\n    const { project, getProjectById, increasePart, decreasePart, setProjectCount, addProjectPart, deleteProjectParts } = usePartCounter();\r\n\r\n    const { setHeader } = useStore();\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n    React.useEffect(() => {\r\n        getProjectById(id).then((project) => {\r\n            project &&\r\n                setHeader({\r\n                    title: project.title,\r\n                    back: {\r\n                        path: '/',\r\n                    },\r\n                });\r\n        });\r\n    }, [id, getProjectById, setHeader]);\r\n\r\n    function selectPart(partId: string) {\r\n        const match = !!selectedParts.find((sp) => sp === partId);\r\n        if (match) return setSelectedParts([...selectedParts].filter((sp) => sp !== partId));\r\n        return setSelectedParts([...selectedParts, partId]);\r\n    }\r\n\r\n    return (\r\n        <div className=\"project-details\">\r\n            {project && (\r\n                <>\r\n                    <ul className=\"project-details__list\">\r\n                        {project?.parts.map((part, index) => {\r\n                            return (\r\n                                <ProjectDetailsListItem\r\n                                    deleteState={deleteState}\r\n                                    key={part.id}\r\n                                    part={part}\r\n                                    setProjectCount={setProjectCount}\r\n                                    decreasePart={decreasePart}\r\n                                    increasePart={increasePart}\r\n                                    selectPart={selectPart}\r\n                                />\r\n                            );\r\n                        })}\r\n                    </ul>\r\n                    {addProjectPartModal && (\r\n                        <AddProjectPartModal\r\n                            save={(data) => {\r\n                                addProjectPart(project?.id, data);\r\n                                setAddProjectPartModal(false);\r\n                            }}\r\n                            close={() => setAddProjectPartModal(false)}\r\n                        ></AddProjectPartModal>\r\n                    )}\r\n                    <MenuButton\r\n                        menuItems={[\r\n                            { icon: 'add', callback: () => setAddProjectPartModal(true) },\r\n                            { icon: 'delete', callback: () => setDeleteState(true) },\r\n                        ]}\r\n                    />\r\n                    {deleteState && (\r\n                        <div className=\"project-details__selected\">\r\n                            <strong>{selectedParts.length} selected</strong>\r\n                            <button\r\n                                onClick={() => {\r\n                                    deleteProjectParts(project.id, selectedParts).then(() => {\r\n                                        setDeleteState(false);\r\n                                        setSelectedParts([]);\r\n                                    });\r\n                                }}\r\n                                disabled={selectedParts.length <= 0}\r\n                                className=\"btn btn-danger\"\r\n                            >\r\n                                Delete selected\r\n                            </button>\r\n                            <button\r\n                                onClick={() => {\r\n                                    setDeleteState(false);\r\n                                    setSelectedParts([]);\r\n                                }}\r\n                                className=\"btn\"\r\n                            >\r\n                                <span className=\"material-icons-round\">close</span>\r\n                            </button>\r\n                        </div>\r\n                    )}\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProjectDetails;\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    onClick: VoidFunction;\r\n}\r\n\r\nconst AddButton: React.FC<Props> = ({ onClick }) => {\r\n    return (\r\n        <button type=\"button\" onClick={onClick} className=\"add-button\">\r\n            <span className=\"material-icons-round\">add</span>\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default AddButton;\r\n","import React from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { ProjectForm } from '../interfaces/project.interface';\r\nimport FormGroup from './FormGroup';\r\nimport Modal from './Modal';\r\n\r\ninterface Props {\r\n    close: VoidFunction;\r\n    save: (value: any) => void;\r\n}\r\n\r\nconst AddProjectModal: React.FC<Props> = ({ close, save }) => {\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors },\r\n    } = useForm<ProjectForm>();\r\n    return (\r\n        <Modal title=\"Create project\" close={close} save={handleSubmit((x) => save(x))}>\r\n            <div className=\"add-project\">\r\n                <FormGroup label=\"Title\" name=\"title\" autofocus={true} required={true} register={register} errors={errors} />\r\n            </div>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default AddProjectModal;\r\n","import * as React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\ninterface Props {\r\n    projects: Array<any>;\r\n}\r\nconst ProjectsList: React.FC<Props> = ({ projects }) => {\r\n    return (\r\n        <ul className=\"projects-list\">\r\n            {projects.map((p) => {\r\n                return (\r\n                    <li className={p.finished ? 'projects-list__item -finished' : 'projects-list__item'} key={p.id}>\r\n                        <Link to={`/projects/${p.id}`}>\r\n                            <div className=\"project-list__info\">\r\n                                <p className=\"title\">{p.title}</p>\r\n                                <p className=\"status\">Status: {p.finished ? 'finished' : 'active'}</p>\r\n                            </div>\r\n                            <span className=\"material-icons-round\">chevron_right</span>\r\n                        </Link>\r\n                    </li>\r\n                );\r\n            })}\r\n        </ul>\r\n    );\r\n};\r\n\r\nexport default ProjectsList;\r\n","import * as React from 'react';\r\nimport AddButton from '../components/AddButton';\r\nimport AddProjectModal from '../components/AddProjectModal';\r\nimport ProjectsList from '../components/ProjectsList';\r\nimport { useProjectService } from '../contexts/projects.provider';\r\nimport { useStore } from '../contexts/store';\r\nimport { Project } from '../interfaces/project.interface';\r\n\r\nconst Projects = () => {\r\n    const [showAddModal, setShowAddModal] = React.useState(false);\r\n    const [projects, setProjects] = React.useState<Project[]>([]);\r\n    const [filterOn, setFilterOn] = React.useState<string>('all');\r\n    const projectService = useProjectService();\r\n    const { resetHeader } = useStore();\r\n\r\n    const filteredProjects = React.useMemo(\r\n        () =>\r\n            projects.filter((p) => {\r\n                switch (filterOn) {\r\n                    case 'active':\r\n                        return !p.finished;\r\n                    case 'finished':\r\n                        return p.finished;\r\n                    default:\r\n                        return p;\r\n                }\r\n            }),\r\n        [projects, filterOn],\r\n    );\r\n\r\n    const getProjects = React.useCallback(async () => {\r\n        return await projectService.getProjects().then(setProjects);\r\n    }, [projectService]);\r\n\r\n    const saveProject = React.useCallback(\r\n        async (projectData) => {\r\n            await projectService.createProject(projectData).then(getProjects);\r\n            setShowAddModal(false);\r\n        },\r\n        [projectService, getProjects],\r\n    );\r\n\r\n    React.useEffect(() => {\r\n        getProjects();\r\n        resetHeader();\r\n    }, [projectService, getProjects, resetHeader]);\r\n\r\n    return (\r\n        <div className=\"projects\">\r\n            <header className=\"projects__header\">\r\n                <h2>Projects</h2>\r\n                <select value={filterOn} onChange={(e) => setFilterOn(e.target.value)}>\r\n                    <option value=\"all\">All</option>\r\n                    <option value=\"finished\">Finished</option>\r\n                    <option value=\"active\">Active</option>\r\n                </select>\r\n            </header>\r\n            <ProjectsList projects={filteredProjects}></ProjectsList>\r\n            <AddButton onClick={() => setShowAddModal(true)}></AddButton>\r\n            {showAddModal && <AddProjectModal close={() => setShowAddModal(false)} save={saveProject}></AddProjectModal>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Projects;\r\n","import React from 'react';\nimport { HashRouter, Link, Route, Switch } from 'react-router-dom';\nimport { useStore } from '../contexts/store';\nimport ProjectDetails from './ProjectDetails';\nimport Projects from './Projects';\n\nfunction App() {\n    const { header } = useStore();\n    return (\n        <div className=\"app\">\n            <HashRouter>\n                <nav>\n                    {header.back ? (\n                        <Link className=\"-back\" to={header.back.path}>\n                            <span className=\"material-icons-round\">{header.back.icon || 'west'}</span>\n                        </Link>\n                    ) : (\n                        <div />\n                    )}\n                    <h1>{header.title}</h1>\n                    {header.action ? (\n                        <button onClick={header.action.callback} className=\"-action\">\n                            <span className=\"material-icons-round\">{header.action.icon}</span>\n                        </button>\n                    ) : (\n                        <div />\n                    )}\n                </nav>\n                <main>\n                    <Switch>\n                        <Route path=\"/\" exact component={Projects}></Route>\n                        <Route path=\"/projects/:id\" component={ProjectDetails}></Route>\n                    </Switch>\n                </main>\n            </HashRouter>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.scss';\nimport App from './pages/App';\nimport { StoreProvider } from './contexts/store';\nimport { ProjectServiceProvider } from './contexts/projects.provider';\n\nReactDOM.render(\n    <React.StrictMode>\n        <StoreProvider>\n            <ProjectServiceProvider>\n                <App />\n            </ProjectServiceProvider>\n        </StoreProvider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}